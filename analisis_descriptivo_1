#-------------------------------------------------------------------------------
# SCRIPT PARA ANÁLISIS DESCRIPTIVO EXPLORATORIO (AED) DE DATOS DE CHURN
#-------------------------------------------------------------------------------

# Paso 0: Instalar y cargar las librerías necesarias
# install.packages("readxl") # Para leer archivos de Excel
# install.packages("dplyr")    # Para manipulación de datos
# install.packages("ggplot2")  # Para visualizaciones de alta calidad
# install.packages("lubridate")# Para manejar fechas

library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)

#-------------------------------------------------------------------------------
# Paso 1: Cargar y Limpiar los Datos
#-------------------------------------------------------------------------------

# Cargar el archivo de Excel
# Reemplaza "ruta/a/tu/modelo_completo.xlsx" con la ubicación real
# df_raw <- read_excel("ruta/a/tu/modelo_completo.xlsx")
df_raw <- read_excel("modelo_completo.xlsx")


# --- Limpieza y Transformación ---
# Esta parte es CRUCIAL. Convertimos texto a números y escalamos.
df_limpio <- df_raw %>%
  mutate(
    # Limpiar columnas de moneda: quitar "$", espacios, comas y convertir a número
    Prima_Promedio = as.numeric(gsub("[\\$\\,\\s]", "", Prima_Promedio)),
    Prima_Ultimo_Periodo = as.numeric(gsub("[\\$\\,\\s]", "", Prima_Ultimo_Periodo)),
    
    # ¡LA TRANSFORMACIÓN QUE PEDISTE! Dividir por 1,000,000
    Prima_Promedio_Millones = Prima_Promedio / 1000000,
    Prima_Ultimo_Periodo_Millones = Prima_Ultimo_Periodo / 1000000,
    Valor_Asegurado_Actual_Millones = Valor_Asegurado_Actual / 1000000,
    
    # Convertir la variable objetivo y otras clave a factores (categóricas)
    CHURN = as.factor(CHURN),
    
    # Convertir columna de fecha a formato de fecha real
    Fecha_Ultima_Renovacion = dmy(Fecha_Ultima_Renovacion)
  ) %>%
  # Seleccionamos las columnas útiles, incluyendo las nuevas en millones
  select(
    ID, CHURN, Antiguedad_dias, Prima_Ultimo_Periodo_Millones, 
    Valor_Asegurado_Actual_Millones, Variacion_Pct_Prima_Ultima_Renovacion,
    VEHAGE, DEPARTAMENTO_MOV, MARCA, CLASE, CILINDRAJE, AGE, GENDER,
    Consultas_Cotizaciones_Propias, Consultas_Cotizaciones_Otras, everything(), 
    -Prima_Promedio, -Prima_Ultimo_Periodo, -Valor_Asegurado_Actual # Quitamos las viejas
  )

cat("### Datos Limpios y Transformados (Primeras Filas) ###\n")
head(df_limpio)


#-------------------------------------------------------------------------------
# Paso 2: Análisis de la Variable Objetivo (CHURN)
#-------------------------------------------------------------------------------
cat("\n### Análisis de la Variable Objetivo: CHURN ###\n")

# Calcular la tasa de fuga (churn rate)
churn_summary <- df_limpio %>%
  count(CHURN) %>%
  mutate(Proporcion = n / sum(n))

print(churn_summary)

# Visualizar la distribución del Churn
ggplot(churn_summary, aes(x = CHURN, y = Proporcion, fill = CHURN)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = scales::percent(Proporcion)), vjust = -0.5) +
  scale_fill_manual(values = c("0" = "skyblue", "1" = "salmon")) +
  labs(
    title = "Distribución de Clientes: Fuga (Churn) vs. Vigentes",
    x = "Cliente se Fugó (1 = Sí, 0 = No)",
    y = "Proporción de Clientes"
  ) +
  theme_minimal()


#-------------------------------------------------------------------------------
# Paso 3: Análisis Descriptivo de Variables Numéricas Clave
#-------------------------------------------------------------------------------
cat("\n### Resumen Estadístico de Variables Numéricas ###\n")
# Seleccionamos solo las variables numéricas más importantes para el resumen
df_limpio %>%
  select(Antiguedad_dias, Prima_Ultimo_Periodo_Millones, Variacion_Pct_Prima_Ultima_Renovacion,
         VEHAGE, AGE, Consultas_Cotizaciones_Otras) %>%
  summary()

# Histograma de la Prima del Último Periodo (en millones)
ggplot(df_limpio, aes(x = Prima_Ultimo_Periodo_Millones)) +
  geom_histogram(bins = 30, fill = "dodgerblue", alpha = 0.7) +
  labs(title = "Distribución de Primas del Último Periodo", x = "Prima (en Millones de $)", y = "Frecuencia") +
  theme_light()


#-------------------------------------------------------------------------------
# Paso 4: Análisis Descriptivo de Variables Categóricas Clave
#-------------------------------------------------------------------------------
cat("\n### Frecuencia de las Marcas de Vehículos (Top 10) ###\n")
df_limpio %>%
  count(MARCA, sort = TRUE) %>%
  top_n(10) %>%
  print()

# Gráfico de barras de los Departamentos más comunes
ggplot(df_limpio, aes(y = fct_rev(fct_infreq(DEPARTAMENTO_MOV)))) +
  geom_bar(fill = "forestgreen") +
  labs(title = "Número de Clientes por Departamento", y = "Departamento", x = "Cantidad de Clientes") +
  theme_light()


#-------------------------------------------------------------------------------
# Paso 5: BÚSQUEDA DE RELACIONES (Análisis Bivariado vs CHURN)
# ¡Aquí empezamos a encontrar el "porqué" de la fuga!
#-------------------------------------------------------------------------------
cat("\n### Comparación de Características entre Clientes que se Van vs. se Quedan ###\n")

# ¿Cómo se compara la prima entre los que se van y los que se quedan?
df_limpio %>%
  group_by(CHURN) %>%
  summarise(
    Prima_Promedio = mean(Prima_Ultimo_Periodo_Millones, na.rm = TRUE),
    Variacion_Prima_Promedio = mean(Variacion_Pct_Prima_Ultima_Renovacion, na.rm = TRUE),
    Cotizaciones_Otras_Promedio = mean(Consultas_Cotizaciones_Otras, na.rm = TRUE)
  )

# Visualización con Boxplots (muy potente para comparar distribuciones)
ggplot(df_limpio, aes(x = CHURN, y = Consultas_Cotizaciones_Otras, fill = CHURN)) +
  geom_boxplot() +
  scale_fill_manual(values = c("0" = "skyblue", "1" = "salmon")) +
  labs(
    title = "Comparación de Cotizaciones en Otras Compañías",
    subtitle = "¿Cotizan más los clientes que se van?",
    x = "Cliente se Fugó (1 = Sí, 0 = No)",
    y = "Número de Cotizaciones en la Competencia"
  ) +
  theme_minimal()




#-----------------------------------------------------------------------------------
# SCRIPT DE ANÁLISIS DESCRIPTIVO (AED) - VERSIÓN CON NÚMERO DE SINIESTROS (NCL)
#-----------------------------------------------------------------------------------

# Paso 0: Cargar librerías (si ya están cargadas, puedes omitir esto)
library(readxl)
library(dplyr)
library(ggplot2)
library(lubridate)
library(forcats) # Para manipular factores en ggplot

#-------------------------------------------------------------------------------
# Paso 1: Cargar y Limpiar los Datos (Incluyendo NCL)
#-------------------------------------------------------------------------------

# df_raw <- read_excel("ruta/a/tu/modelo_completo.xlsx")
df_raw <- read_excel("modelo_completo.xlsx") # Asumimos que la columna NCL está aquí

# --- Limpieza y Transformación ---
df_limpio <- df_raw %>%
  mutate(
    Prima_Promedio = as.numeric(gsub("[\\$\\,\\s]", "", `Prima_Promedio`)),
    Prima_Ultimo_Periodo = as.numeric(gsub("[\\$\\,\\s]", "", `Prima_Ultimo_Periodo`)),
    
    Prima_Promedio_Millones = Prima_Promedio / 1000000,
    Prima_Ultimo_Periodo_Millones = Prima_Ultimo_Periodo / 1000000,
    Valor_Asegurado_Actual_Millones = `Valor_Asegurado_Actual` / 1000000,
    
    # Aseguramos que NCL sea numérica y CHURN sea un factor
    NCL = as.numeric(NCL),
    CHURN = as.factor(CHURN),
    
    Fecha_Ultima_Renovacion = dmy(Fecha_Ultima_Renovacion)
  ) %>%
  # Seleccionamos las columnas que usaremos
  select(
    ID, CHURN, Antiguedad_dias, NCL, Prima_Ultimo_Periodo_Millones, 
    Valor_Asegurado_Actual_Millones, Variacion_Pct_Prima_Ultima_Renovacion,
    VEHAGE, DEPARTAMENTO_MOV, MARCA, CLASE, CILINDRAJE, AGE, GENDER,
    Consultas_Cotizaciones_Propias, Consultas_Cotizaciones_Otras
  )

cat("### Datos Limpios y Transformados (Primeras Filas) ###\n")
head(df_limpio)

#-------------------------------------------------------------------------------
# Paso 2: Análisis Descriptivo de NCL y otras Variables Numéricas
#-------------------------------------------------------------------------------
cat("\n### Resumen Estadístico de Variables Numéricas (Incluyendo NCL) ###\n")
df_limpio %>%
  select(Antiguedad_dias, NCL, Prima_Ultimo_Periodo_Millones, 
         Variacion_Pct_Prima_Ultima_Renovacion, Consultas_Cotizaciones_Otras) %>%
  summary()

# Visualizar la distribución del Número de Siniestros (NCL)
ggplot(df_limpio, aes(x = as.factor(NCL))) +
  geom_bar(fill = "darkgoldenrod1") +
  geom_text(stat='count', aes(label=..count..), vjust=-0.5) +
  labs(
    title = "Distribución del Número de Siniestros (NCL) por Póliza",
    x = "Cantidad de Siniestros (NCL)",
    y = "Número de Clientes"
  ) +
  theme_classic()

#-------------------------------------------------------------------------------
# Paso 3: BÚSQUEDA DE RELACIONES - El impacto de NCL en el CHURN
# ¡Aquí probamos nuestras hipótesis!
#-------------------------------------------------------------------------------
cat("\n### Impacto del Número de Siniestros (NCL) en la Fuga (CHURN) ###\n")

# 1. Comparar el promedio de siniestros entre los que se van y los que se quedan
promedio_siniestros_churn <- df_limpio %>%
  group_by(CHURN) %>%
  summarise(
    Siniestros_Promedio = mean(NCL, na.rm = TRUE),
    Prima_Promedio_Millones = mean(Prima_Ultimo_Periodo_Millones, na.rm = TRUE),
    Cotizaciones_Otras_Promedio = mean(Consultas_Cotizaciones_Otras, na.rm = TRUE)
  )

print(promedio_siniestros_churn)

# 2. Visualización con Boxplot para comparar la distribución de NCL
ggplot(df_limpio, aes(x = CHURN, y = NCL, fill = CHURN)) +
  geom_boxplot(alpha = 0.8) +
  scale_fill_manual(values = c("0" = "skyblue", "1" = "salmon")) +
  labs(
    title = "Comparación del Número de Siniestros vs. Fuga",
    subtitle = "¿Los clientes que se van tienen un historial de siniestros diferente?",
    x = "Cliente se Fugó (1 = Sí, 0 = No)",
    y = "Número de Siniestros (NCL)"
  ) +
  theme_minimal()

# 3. (MUY REVELADOR) Calcular la TASA DE FUGA para cada valor de NCL
tasa_fuga_por_ncl <- df_limpio %>%
  group_by(NCL) %>%
  summarise(
    Total_Clientes = n(),
    Clientes_Fugados = sum(as.numeric(as.character(CHURN))),
    Tasa_Fuga = Clientes_Fugados / Total_Clientes
  ) %>%
  arrange(desc(Tasa_Fuga))

cat("\n### Tasa de Fuga por Cantidad de Siniestros ###\n")
print(tasa_fuga_por_ncl)

# Visualizar la Tasa de Fuga por NCL
ggplot(tasa_fuga_por_ncl, aes(x = as.factor(NCL), y = Tasa_Fuga)) +
  geom_bar(stat = "identity", fill = "firebrick") +
  geom_text(aes(label = scales::percent(Tasa_Fuga, accuracy = 0.1)), vjust = -0.5) +
  scale_y_continuous(labels = scales::percent) +
  labs(
    title = "Tasa de Fuga por Número de Siniestros",
    x = "Cantidad de Siniestros (NCL)",
    y = "Tasa de Fuga (%)"
  ) +
  theme_light()
